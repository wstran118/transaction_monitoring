using Microsoft.AspNetCore.Authorization;
using Microsoft.AspNetCore.Mvc;
using Microsoft.EntityFrameworkCore;

namespace ReportingService.Controllers
{
    public class Transaction
    {
        public Guid Id { get; set; }
        public decimal Amount { get; set; }
        public string UserId { get; set; }
        public DateTime Timestamp { get; set; }
        public string Status { get; set; }
    }

    [ApiController]
    [Route("api/reports")]
    [Authorize(Roles = "ComplianceOfficer")]
    public class ReportController : ControllerBase
    {
        private readonly AppDbContext _context;
        private readonly ILogger<ReportController> _logger;

        public ReportController(AppDbContext context, ILogger<ReportController> logger)
        {
            _context = context;
            _logger = logger;
        }

        [HttpGet("compliance")]
        public async Task<IActionResult> GetComplianceReport(DateTime startDate, DateTime endDate)
        {
            var flaggedTransactions = await _context.Transactions
                .Where(t => t.Status == "Flagged" && t.Timestamp >= startDate && t.Timestamp <= endDate)
                .ToListAsync();

            _logger.LogInformation($"Compliance report generated by {User.Identity.Name}");
            return Ok(flaggedTransactions);
        }
    }

    public class AppDbContext : DbContext
    {
        public DbSet<Transaction> Transactions { get; set; }

        public AppDbContext(DbContextOptions<AppDbContext> options) : base(options) { }
    }
}